{"mappings":"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","sources":["<anon>","index.js","src/UIBuilder.js","src/BloomFilter.js","src/draw.js","src/vector.js"],"sourcesContent":["class $d4da9a8798806342$export$fbc160adde9cf656 {\n    constructor(size = 10, hashCount = 3){\n        this.size = size;\n        this.hashCount = hashCount;\n        this.bits = new Array(size).fill(false);\n    }\n    hash(str, seed) {\n        let hash = 0;\n        for(let i = 0; i < str.length; i++)hash = (hash * seed + str.charCodeAt(i)) % this.size;\n        return hash;\n    }\n    add(item) {\n        const indexes = [];\n        for(let i = 1; i <= this.hashCount; i++){\n            const pos = this.hash(item, i);\n            this.bits[pos] = true;\n            indexes.push(pos);\n        }\n        return indexes;\n    }\n    contains(item) {\n        for(let i = 1; i <= this.hashCount; i++){\n            const pos = this.hash(item, i);\n            if (!this.bits[pos]) return false;\n        }\n        return true;\n    }\n}\n\n\nclass $94d2bf403fd24a66$export$b5f17492ef6f79a1 {\n    draw = null;\n    bitsRendered = false;\n    inputCheckButton = null;\n    inputItemButton = null;\n    inputCheckField = null;\n    inputItemField = null;\n    inputWordDiv = null;\n    captionDiv = null;\n    bitsDiv = null;\n    listDiv = null;\n    bloom = null;\n    constructor(draw, bloom){\n        this.draw = draw;\n        this.bitsRendered = false;\n        this.bloom = bloom;\n        this.initializeAddItemInputContainer();\n        this.initializeAddItemContainer();\n        this.initializeBloomFilterContainer();\n        this.initializeCheckItemContainer();\n        this.initializeDisplayContainer();\n        this.initializeStartingParamsUI();\n        const items = [\n            'apple',\n            'banana',\n            'grape',\n            'orange'\n        ];\n        this.initializeDebug(items, 'teste');\n    }\n    renderBits() {\n        this.bitsDiv.innerHTML = '';\n        this.bloom.bits.forEach((bit, i)=>{\n            const itemDiv = document.createElement('div');\n            itemDiv.className = 'bit-item';\n            itemDiv.textContent = bit ? '1' : '0';\n            itemDiv.title = `Bit ${i}`;\n            itemDiv.id = 'bit-' + i;\n            this.bitsDiv.appendChild(itemDiv);\n        });\n    }\n    initializeDebug(initialItems = [], debugSearch = '') {\n        initialItems.forEach((item)=>{\n            this.inputItemField.value = item;\n            this.addItem();\n        });\n        this.inputCheckField.value = debugSearch;\n        this.checkItem();\n    }\n    checkItem() {\n        this.draw.clearCheckLines();\n        const value = this.inputCheckField.value.trim();\n        this.inputCheckField.value = '';\n        if (value) {\n            let contains = true;\n            this.inputWordDiv.textContent = value;\n            this.inputWordDiv.style.opacity = '1';\n            for(let i = 1; i <= this.bloom.hashCount; i++){\n                const pos = this.bloom.hash(value, i);\n                const bitDiv = document.getElementById('bit-' + pos);\n                let color = '#14ce43ff';\n                if (!this.bloom.bits[pos]) {\n                    contains = false;\n                    color = '#c93030ff';\n                }\n                if (bitDiv) this.draw.drawCheckLine(this.inputWordDiv, bitDiv, color);\n            }\n            this.captionDiv.textContent = contains ? `\"${value}\" is possibly in the set.` : `\"${value}\" is definitely not in the set.`;\n        } else {\n            this.inputWordDiv.style.opacity = '0';\n            this.captionDiv.textContent = '';\n        }\n        document.dispatchEvent(new Event('refreshUI'));\n    }\n    addItem() {\n        const value = this.inputItemField.value.trim();\n        if (value) {\n            const itemDiv = document.createElement('div');\n            itemDiv.className = 'list-item';\n            itemDiv.textContent = value;\n            itemDiv.id = 'item-' + value;\n            this.listDiv.appendChild(itemDiv);\n            const color = this.#stringToColor(value);\n            this.bloom.add(value);\n            this.inputItemField.value = '';\n            for(let i = 1; i <= this.bloom.hashCount; i++){\n                const pos = this.bloom.hash(value, i);\n                const bitDiv = document.getElementById('bit-' + pos);\n                if (bitDiv) this.draw.drawItemLine(itemDiv, bitDiv, color);\n            }\n            this.checkItem();\n        }\n    }\n    #stringToColor(str) {\n        let hash = 0;\n        for(let i = 0; i < str.length; i++)hash = str.charCodeAt(i) + ((hash << 5) - hash);\n        let color = '#';\n        for(let i = 0; i < 3; i++){\n            const value = hash >> i * 8 & 0xFF;\n            color += value.toString(16).padStart(2, '0');\n        }\n        return color;\n    }\n    initializeAddItemInputContainer() {\n        const addItemInputContainer = document.getElementById('add-item-input-container');\n        this.inputItemField = document.createElement('input');\n        this.inputItemField.type = 'text';\n        this.inputItemField.placeholder = 'Enter item value';\n        this.inputItemField.maxLength = 20;\n        this.inputItemField.className = 'input-field';\n        addItemInputContainer.appendChild(this.inputItemField);\n        this.inputItemButton = document.createElement('button');\n        this.inputItemButton.id = 'add-item-btn';\n        this.inputItemButton.textContent = 'Add Element';\n        this.inputItemButton.className = 'input-button';\n        addItemInputContainer.appendChild(this.inputItemButton);\n        this.inputItemButton.addEventListener('click', ()=>this.addItem());\n        this.inputItemField.addEventListener('keydown', (e)=>{\n            if (e.key === 'Enter') this.addItem();\n        });\n    }\n    initializeAddItemContainer() {\n        const addItemContainer = document.getElementById('add-item-container');\n        addItemContainer.innerHTML = '';\n        this.listDiv = document.createElement('div');\n        this.listDiv.id = 'left-list';\n        this.listDiv.className = 'list-elements';\n        addItemContainer.appendChild(this.listDiv);\n    }\n    initializeBloomFilterContainer() {\n        const bloomFilterContainer = document.getElementById('bloom-filter-container');\n        bloomFilterContainer.innerHTML = '';\n        this.bitsDiv = document.createElement('div');\n        this.bitsDiv.className = 'bloom-filter-elements';\n        bloomFilterContainer.appendChild(this.bitsDiv);\n        this.renderBits();\n    }\n    initializeCheckItemContainer() {\n        const checkItemInputContainer = document.getElementById('check-item-input-container');\n        checkItemInputContainer.innerHTML = '';\n        this.inputCheckField = document.createElement('input');\n        this.inputCheckField.type = 'text';\n        this.inputCheckField.placeholder = 'Enter item to check';\n        this.inputCheckField.maxLength = 20;\n        this.inputCheckField.className = 'input-field';\n        checkItemInputContainer.appendChild(this.inputCheckField);\n        this.inputCheckButton = document.createElement('button');\n        this.inputCheckButton.textContent = 'Check Item';\n        this.inputCheckButton.className = 'input-button';\n        checkItemInputContainer.appendChild(this.inputCheckButton);\n        this.inputCheckButton.addEventListener('click', ()=>this.checkItem());\n        this.inputCheckField.addEventListener('keydown', (e)=>{\n            if (e.key === 'Enter') this.checkItem();\n        });\n    }\n    initializeDisplayContainer() {\n        this.displayContainer = document.getElementById('check-item-container');\n        this.displayContainer.innerHTML = '';\n        this.inputWordDiv = document.createElement('div');\n        this.inputWordDiv.id = 'right-list';\n        this.inputWordDiv.className = 'list-item';\n        this.displayContainer.appendChild(this.inputWordDiv);\n        this.inputWordDiv.style.opacity = '0';\n        this.captionDiv = document.createElement('div');\n        this.captionDiv.id = 'caption';\n        this.captionDiv.className = 'caption';\n        this.displayContainer.appendChild(this.captionDiv);\n    }\n    initializeStartingParamsUI() {\n        const startingParamsContainer = document.getElementById('starting-params-container');\n        startingParamsContainer.innerHTML = '';\n        const sizeGroup = document.createElement('div');\n        sizeGroup.style.display = 'flex';\n        sizeGroup.style.alignItems = 'center';\n        sizeGroup.style.marginBottom = '12px';\n        const sizeLabel = document.createElement('label');\n        sizeLabel.textContent = 'Bloom filter size:';\n        sizeLabel.setAttribute('for', 'bloom-size-input');\n        sizeLabel.style.marginRight = '8px';\n        sizeLabel.style.minWidth = '140px';\n        sizeLabel.style.textAlign = 'right';\n        sizeGroup.appendChild(sizeLabel);\n        const sizeInput = document.createElement('input');\n        sizeInput.type = 'number';\n        sizeInput.placeholder = 'Bloom filter size';\n        sizeInput.className = 'input-field';\n        sizeInput.value = this.bloom.size;\n        sizeInput.id = 'bloom-size-input';\n        sizeGroup.appendChild(sizeInput);\n        startingParamsContainer.appendChild(sizeGroup);\n        const hashGroup = document.createElement('div');\n        hashGroup.style.display = 'flex';\n        hashGroup.style.alignItems = 'center';\n        hashGroup.style.marginBottom = '12px';\n        const hashCountLabel = document.createElement('label');\n        hashCountLabel.textContent = 'Number of hash functions:';\n        hashCountLabel.setAttribute('for', 'bloom-hashcount-input');\n        hashCountLabel.style.marginRight = '8px';\n        hashCountLabel.style.minWidth = '140px';\n        hashCountLabel.style.textAlign = 'right';\n        hashGroup.appendChild(hashCountLabel);\n        const hashCountInput = document.createElement('input');\n        hashCountInput.type = 'number';\n        hashCountInput.placeholder = 'Number of hash functions';\n        hashCountInput.className = 'input-field';\n        hashCountInput.value = this.bloom.hashCount;\n        hashCountInput.id = 'bloom-hashcount-input';\n        hashGroup.appendChild(hashCountInput);\n        startingParamsContainer.appendChild(hashGroup);\n        const setParamsButton = document.createElement('button');\n        setParamsButton.textContent = 'Set Parameters';\n        setParamsButton.className = 'input-button';\n        startingParamsContainer.appendChild(setParamsButton);\n        setParamsButton.addEventListener('click', ()=>{\n            const size = parseInt(sizeInput.value);\n            const hashCount = parseInt(hashCountInput.value);\n            if (!isNaN(size) && !isNaN(hashCount)) {\n                this.bloom = new (0, $d4da9a8798806342$export$fbc160adde9cf656)(size, hashCount);\n                this.draw.clearAllLines();\n                this.listDiv.innerHTML = '';\n                this.inputCheckField.value = '';\n                this.checkItem();\n            }\n        });\n    }\n}\n\n\n\nclass $1e48cf6d27057652$export$9b781de7bf37bf48 {\n    div1;\n    div2;\n    side;\n    color;\n    constructor(div1, div2, side = null, color = null){\n        this.div1 = div1.id;\n        this.div2 = div2.id;\n        this.side = side;\n        this.color = color;\n    }\n}\n\n\nclass $450fab56b0cbf5ba$var$Draw {\n    static svg;\n    itemLines;\n    checkLines;\n    canvasContainer;\n    constructor(){\n        this.canvasContainer = document.getElementById('filter-container');\n        this.initializeSVG();\n        this.itemLines = [];\n        this.checkLines = [];\n    }\n    renderLines() {\n        this.canvasContainer.removeChild(this.svg);\n        this.initializeSVG();\n        for (const v of this.itemLines)this.#drawLine(v);\n        for (const v of this.checkLines)this.#drawLine(v);\n    }\n    initializeSVG() {\n        this.svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        this.svg.setAttribute('id', 'connection-svg');\n        this.svg.style.position = 'absolute';\n        this.svg.style.left = '0';\n        this.svg.style.top = '0';\n        this.svg.style.width = '100%';\n        this.svg.style.height = '100%';\n        this.svg.style.pointerEvents = 'none';\n        this.canvasContainer.appendChild(this.svg);\n    }\n    #drawLine(v) {\n        const dDiv = document.getElementById(v.div2);\n        // if the dDiv content is equals to '0' we set the background color to red\n        if (dDiv.innerHTML === '0') dDiv.style.backgroundColor = '#f76c6cff';\n        if (dDiv.innerHTML === '1') dDiv.style.backgroundColor = '#4bb543ff';\n        const origin = document.getElementById(v.div1).getBoundingClientRect();\n        const destiny = dDiv.getBoundingClientRect();\n        const parent = this.canvasContainer.getBoundingClientRect();\n        let startX, startY, endX, endY;\n        if (v.side === 'right') {\n            startX = origin.left - parent.left;\n            startY = origin.top - parent.top + origin.height / 2;\n            endX = destiny.left - parent.left + destiny.width;\n            endY = destiny.top - parent.top + destiny.height / 2;\n        }\n        if (v.side === 'left') {\n            startX = origin.left + origin.width - parent.left;\n            startY = origin.top + origin.height / 2 - parent.top;\n            endX = destiny.left - parent.left;\n            endY = destiny.top + destiny.height / 2 - parent.top;\n        }\n        const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n        const color = v.color || '#143b83ff';\n        line.setAttribute('x1', startX);\n        line.setAttribute('y1', startY);\n        line.setAttribute('x2', endX);\n        line.setAttribute('y2', endY);\n        line.setAttribute('stroke', color);\n        line.setAttribute('stroke-width', '4');\n        this.svg.appendChild(line);\n        return line;\n    }\n    drawCheckLine(div1, div2, color) {\n        const v = new (0, $1e48cf6d27057652$export$9b781de7bf37bf48)(div1, div2, 'right', color);\n        this.checkLines.push(v);\n        return v;\n    }\n    drawItemLine(div1, div2, color) {\n        const v = new (0, $1e48cf6d27057652$export$9b781de7bf37bf48)(div1, div2, 'left', color);\n        this.itemLines.push(v);\n        return v;\n    }\n    clearCheckLines() {\n        this.checkLines = [];\n    }\n    clearAllLines() {\n        this.itemLines = [];\n        this.checkLines = [];\n    }\n}\nconst $450fab56b0cbf5ba$export$e529deb2bfd496dc = new $450fab56b0cbf5ba$var$Draw();\nvar $450fab56b0cbf5ba$export$2e2bcd8739ae039 = $450fab56b0cbf5ba$export$e529deb2bfd496dc;\n\n\nconst $dad545c909cfec2d$var$bloom = new (0, $d4da9a8798806342$export$fbc160adde9cf656)(15, 3);\nconst $dad545c909cfec2d$var$uiBuilder = new (0, $94d2bf403fd24a66$export$b5f17492ef6f79a1)((0, $450fab56b0cbf5ba$export$e529deb2bfd496dc), $dad545c909cfec2d$var$bloom);\nfunction $dad545c909cfec2d$var$refreshUI() {\n    $dad545c909cfec2d$var$uiBuilder.renderBits();\n    (0, $450fab56b0cbf5ba$export$e529deb2bfd496dc).renderLines();\n}\ndocument.addEventListener('refreshUI', ()=>{\n    $dad545c909cfec2d$var$refreshUI();\n});\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    setTimeout(()=>{\n        $dad545c909cfec2d$var$refreshUI();\n    }, 50);\n});\nwindow.addEventListener('resize', ()=>{\n    document.dispatchEvent(new Event('refreshUI'));\n});\nwindow.addEventListener('scroll', ()=>{\n    document.dispatchEvent(new Event('refreshUI'));\n});\n\n\n//# sourceMappingURL=bloom_filter_va.d0fe7907.js.map\n","import { UIBuilder } from './src/UIBuilder.js';\n\nimport { BloomFilter } from './src/BloomFilter.js';\nimport { draw } from './src/draw.js';\n\nconst bloom = new BloomFilter(15, 3);\nconst uiBuilder = new UIBuilder(draw, bloom);\n\nfunction refreshUI () {\n    uiBuilder.renderBits();\n    draw.renderLines();\n}\n\ndocument.addEventListener('refreshUI', () => {\n    refreshUI();\n});\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    setTimeout(() => {\n        refreshUI();\n    }, 50);\n});\n\nwindow.addEventListener('resize', () => {\n    document.dispatchEvent(new Event('refreshUI'));\n});\n\nwindow.addEventListener('scroll', () => {\n    document.dispatchEvent(new Event('refreshUI'));\n});","import { BloomFilter } from './BloomFilter.js';\n\nclass UIBuilder {\n\n    draw = null;\n    bitsRendered = false;\n    inputCheckButton = null;\n    inputItemButton = null;\n    inputCheckField = null;\n    inputItemField = null;\n    inputWordDiv = null;\n    captionDiv = null;\n    bitsDiv = null;\n    listDiv = null;\n    bloom = null;\n\n    constructor(draw, bloom) {\n        this.draw = draw;\n        this.bitsRendered = false;\n        this.bloom = bloom;\n        this.initializeAddItemInputContainer();\n        this.initializeAddItemContainer();\n        this.initializeBloomFilterContainer();\n        this.initializeCheckItemContainer();\n        this.initializeDisplayContainer();\n        this.initializeStartingParamsUI();\n\n        const items = ['apple', 'banana', 'grape', 'orange'];\n        this.initializeDebug(items, 'teste');\n    }\n\n    renderBits() {\n        this.bitsDiv.innerHTML = '';\n        this.bloom.bits.forEach((bit, i) => {\n            const itemDiv = document.createElement('div');\n            itemDiv.className = 'bit-item';\n            itemDiv.textContent = bit ? '1' : '0';\n            itemDiv.title = `Bit ${i}`;\n            itemDiv.id = 'bit-' + i;\n            this.bitsDiv.appendChild(itemDiv);\n        });\n    }\n\n    initializeDebug(initialItems = [], debugSearch = '') {\n        initialItems.forEach(item => {\n            this.inputItemField.value = item;\n            this.addItem();\n        });\n\n        this.inputCheckField.value = debugSearch;\n        this.checkItem();\n    }\n\n    checkItem() {\n        this.draw.clearCheckLines();\n\n        const value = this.inputCheckField.value.trim();\n        this.inputCheckField.value = '';\n        if (value) {\n            let contains = true;\n            this.inputWordDiv.textContent = value;\n            this.inputWordDiv.style.opacity = '1';\n            for (let i = 1; i <= this.bloom.hashCount; i++) {\n                const pos = this.bloom.hash(value, i);\n                const bitDiv = document.getElementById('bit-' + pos);\n                let color = '#14ce43ff';\n                if (!this.bloom.bits[pos]) {\n                    contains = false;\n                    color = '#c93030ff';\n                }\n\n                if (bitDiv) {\n                    this.draw.drawCheckLine(this.inputWordDiv, bitDiv, color);\n                }\n\n            }\n\n            this.captionDiv.textContent = contains ? `\"${value}\" is possibly in the set.` : `\"${value}\" is definitely not in the set.`;\n        }\n        else {\n            this.inputWordDiv.style.opacity = '0';\n            this.captionDiv.textContent = '';\n        }\n\n        document.dispatchEvent(new Event('refreshUI'));\n    }\n\n    addItem() {\n        const value = this.inputItemField.value.trim();\n        if (value) {\n            const itemDiv = document.createElement('div');\n            itemDiv.className = 'list-item';\n            itemDiv.textContent = value;\n            itemDiv.id = 'item-' + value;\n            this.listDiv.appendChild(itemDiv);\n            const color = this.#stringToColor(value);\n\n            this.bloom.add(value);\n            this.inputItemField.value = '';\n\n            for (let i = 1; i <= this.bloom.hashCount; i++) {\n                const pos = this.bloom.hash(value, i);\n                const bitDiv = document.getElementById('bit-' + pos);\n\n                if (bitDiv) {\n                    this.draw.drawItemLine(itemDiv, bitDiv, color);\n                }\n            }\n            this.checkItem();\n        }\n    }\n\n    #stringToColor(str) {\n        let hash = 0;\n        for (let i = 0; i < str.length; i++) {\n            hash = str.charCodeAt(i) + ((hash << 5) - hash);\n        }\n        let color = '#';\n        for (let i = 0; i < 3; i++) {\n            const value = (hash >> (i * 8)) & 0xFF;\n            color += value.toString(16).padStart(2, '0');\n        }\n        return color;\n    }\n\n    initializeAddItemInputContainer() {\n        const addItemInputContainer = document.getElementById('add-item-input-container');\n        this.inputItemField = document.createElement('input');\n        this.inputItemField.type = 'text';\n        this.inputItemField.placeholder = 'Enter item value';\n        this.inputItemField.maxLength = 20;\n        this.inputItemField.className = 'input-field';\n        addItemInputContainer.appendChild(this.inputItemField);\n\n        this.inputItemButton = document.createElement('button');\n        this.inputItemButton.id = 'add-item-btn';\n        this.inputItemButton.textContent = 'Add Element';\n        this.inputItemButton.className = 'input-button';\n        addItemInputContainer.appendChild(this.inputItemButton);\n\n        this.inputItemButton.addEventListener('click', () => this.addItem());\n        this.inputItemField.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter') {\n                this.addItem();\n            }\n        });\n    }\n\n    initializeAddItemContainer() {\n        const addItemContainer = document.getElementById('add-item-container');\n        addItemContainer.innerHTML = '';\n        this.listDiv = document.createElement('div');\n        this.listDiv.id = 'left-list';\n        this.listDiv.className = 'list-elements';\n        addItemContainer.appendChild(this.listDiv);\n    }\n\n    initializeBloomFilterContainer() {\n        const bloomFilterContainer = document.getElementById('bloom-filter-container');\n        bloomFilterContainer.innerHTML = '';\n\n        this.bitsDiv = document.createElement('div');\n        this.bitsDiv.className = 'bloom-filter-elements';\n        bloomFilterContainer.appendChild(this.bitsDiv);\n\n        this.renderBits();\n    }\n\n    initializeCheckItemContainer() {\n        const checkItemInputContainer = document.getElementById('check-item-input-container');\n\n        checkItemInputContainer.innerHTML = '';\n        this.inputCheckField = document.createElement('input');\n        this.inputCheckField.type = 'text';\n        this.inputCheckField.placeholder = 'Enter item to check';\n        this.inputCheckField.maxLength = 20;\n        this.inputCheckField.className = 'input-field';\n        checkItemInputContainer.appendChild(this.inputCheckField);\n\n        this.inputCheckButton = document.createElement('button');\n        this.inputCheckButton.textContent = 'Check Item';\n        this.inputCheckButton.className = 'input-button';\n        checkItemInputContainer.appendChild(this.inputCheckButton);\n\n        this.inputCheckButton.addEventListener('click', () => this.checkItem());\n        this.inputCheckField.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter') {\n                this.checkItem();\n            }\n        });\n    }\n\n    initializeDisplayContainer() {\n        this.displayContainer = document.getElementById('check-item-container');\n        this.displayContainer.innerHTML = '';\n\n        this.inputWordDiv = document.createElement('div');\n        this.inputWordDiv.id = 'right-list';\n        this.inputWordDiv.className = 'list-item';\n        this.displayContainer.appendChild(this.inputWordDiv);\n        this.inputWordDiv.style.opacity = '0';\n\n        this.captionDiv = document.createElement('div');\n        this.captionDiv.id = 'caption';\n        this.captionDiv.className = 'caption';\n        this.displayContainer.appendChild(this.captionDiv);\n    }\n\n    initializeStartingParamsUI() {\n\n        const startingParamsContainer = document.getElementById('starting-params-container');\n        startingParamsContainer.innerHTML = '';\n\n        const sizeGroup = document.createElement('div');\n        sizeGroup.style.display = 'flex';\n        sizeGroup.style.alignItems = 'center';\n        sizeGroup.style.marginBottom = '12px';\n\n        const sizeLabel = document.createElement('label');\n        sizeLabel.textContent = 'Bloom filter size:';\n        sizeLabel.setAttribute('for', 'bloom-size-input');\n        sizeLabel.style.marginRight = '8px';\n        sizeLabel.style.minWidth = '140px';\n        sizeLabel.style.textAlign = 'right';\n        sizeGroup.appendChild(sizeLabel);\n\n        const sizeInput = document.createElement('input');\n        sizeInput.type = 'number';\n        sizeInput.placeholder = 'Bloom filter size';\n        sizeInput.className = 'input-field';\n        sizeInput.value = this.bloom.size;\n        sizeInput.id = 'bloom-size-input';\n        sizeGroup.appendChild(sizeInput);\n\n        startingParamsContainer.appendChild(sizeGroup);\n\n        const hashGroup = document.createElement('div');\n        hashGroup.style.display = 'flex';\n        hashGroup.style.alignItems = 'center';\n        hashGroup.style.marginBottom = '12px';\n\n        const hashCountLabel = document.createElement('label');\n        hashCountLabel.textContent = 'Number of hash functions:';\n        hashCountLabel.setAttribute('for', 'bloom-hashcount-input');\n        hashCountLabel.style.marginRight = '8px';\n        hashCountLabel.style.minWidth = '140px';\n        hashCountLabel.style.textAlign = 'right';\n        hashGroup.appendChild(hashCountLabel);\n\n        const hashCountInput = document.createElement('input');\n        hashCountInput.type = 'number';\n        hashCountInput.placeholder = 'Number of hash functions';\n        hashCountInput.className = 'input-field';\n        hashCountInput.value = this.bloom.hashCount;\n        hashCountInput.id = 'bloom-hashcount-input';\n        hashGroup.appendChild(hashCountInput);\n\n        startingParamsContainer.appendChild(hashGroup);\n\n        const setParamsButton = document.createElement('button');\n        setParamsButton.textContent = 'Set Parameters';\n        setParamsButton.className = 'input-button';\n        startingParamsContainer.appendChild(setParamsButton);\n\n        setParamsButton.addEventListener('click', () => {\n            const size = parseInt(sizeInput.value);\n            const hashCount = parseInt(hashCountInput.value);\n            if (!isNaN(size) && !isNaN(hashCount)) {\n                this.bloom = new BloomFilter(size, hashCount);\n                this.draw.clearAllLines();\n                this.listDiv.innerHTML = '';\n                this.inputCheckField.value = '';\n                this.checkItem();\n            }\n        });\n    }\n}\n\nexport { UIBuilder };","export class BloomFilter {\n    constructor(size = 10, hashCount = 3) {\n        this.size = size;\n        this.hashCount = hashCount;\n        this.bits = new Array(size).fill(false);\n    }\n\n    hash(str, seed) {\n        let hash = 0;\n        for (let i = 0; i < str.length; i++) {\n            hash = (hash * seed + str.charCodeAt(i)) % this.size;\n        }\n        return hash;\n    }\n\n    add(item) {\n        const indexes = [];\n        for (let i = 1; i <= this.hashCount; i++) {\n            const pos = this.hash(item, i);\n            this.bits[pos] = true;\n            indexes.push(pos);\n        }\n        return indexes;\n    }\n\n    contains(item) {\n        for (let i = 1; i <= this.hashCount; i++) {\n            const pos = this.hash(item, i);\n            if (!this.bits[pos]) return false;\n        }\n        return true;\n    }\n}\n","import { Vector } from \"./vector.js\";\n\nclass Draw {\n    static svg;\n    itemLines;\n    checkLines;\n    canvasContainer;\n\n    constructor() {\n        this.canvasContainer = document.getElementById('filter-container');\n        this.initializeSVG();\n        this.itemLines = [];\n        this.checkLines = [];\n    }\n\n    renderLines() {\n        this.canvasContainer.removeChild(this.svg);\n        this.initializeSVG();\n\n        for (const v of this.itemLines) {\n            this.#drawLine(v);\n        }\n\n        for (const v of this.checkLines) {\n            this.#drawLine(v);\n        }\n    }\n\n    initializeSVG() {\n        this.svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        this.svg.setAttribute('id', 'connection-svg');\n        this.svg.style.position = 'absolute';\n        this.svg.style.left = '0';\n        this.svg.style.top = '0';\n        this.svg.style.width = '100%';\n        this.svg.style.height = '100%';\n        this.svg.style.pointerEvents = 'none';\n        this.canvasContainer.appendChild(this.svg);\n    }\n\n    #drawLine(v) {\n        const dDiv = document.getElementById(v.div2);\n        // if the dDiv content is equals to '0' we set the background color to red\n        if (dDiv.innerHTML === '0') {\n            dDiv.style.backgroundColor = '#f76c6cff';\n        }\n\n        if (dDiv.innerHTML === '1') {\n            dDiv.style.backgroundColor = '#4bb543ff';\n        }\n        \n        const origin = document.getElementById(v.div1).getBoundingClientRect();\n        const destiny = dDiv.getBoundingClientRect();\n        const parent = this.canvasContainer.getBoundingClientRect();\n\n        let startX, startY, endX, endY;\n        if(v.side === 'right')\n        {\n            startX = origin.left - parent.left;\n            startY = origin.top - parent.top + origin.height / 2;\n            endX = destiny.left - parent.left + destiny.width;\n            endY = destiny.top - parent.top + destiny.height / 2;\n        }\n\n        if(v.side === 'left')\n        {\n            startX = origin.left + origin.width - parent.left;\n            startY = origin.top + origin.height / 2 - parent.top;\n            endX = destiny.left - parent.left;\n            endY = destiny.top + destiny.height / 2 - parent.top;\n        }\n\n        const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n        const color = v.color || '#143b83ff';\n        line.setAttribute('x1', startX);\n        line.setAttribute('y1', startY);\n        line.setAttribute('x2', endX);\n        line.setAttribute('y2', endY);\n        line.setAttribute('stroke', color);\n        line.setAttribute('stroke-width', '4');\n        this.svg.appendChild(line);\n        return line;\n    }\n\n    drawCheckLine(div1, div2, color) {\n        const v = new Vector(div1, div2, 'right', color);\n        this.checkLines.push(v);\n        return v;\n    }\n\n    drawItemLine(div1, div2, color) {\n        const v = new Vector(div1, div2, 'left', color);\n        this.itemLines.push(v);\n        return v;\n    }\n\n    clearCheckLines() {\n        this.checkLines = [];\n    }\n\n    clearAllLines() {\n        this.itemLines = [];\n        this.checkLines = [];\n    }\n}\n\nconst draw = new Draw();\nexport default draw;\nexport { draw };","class Vector {\n    div1\n    div2\n    side\n    color\n\n    constructor(div1, div2, side=null, color=null) {\n        this.div1 = div1.id;\n        this.div2 = div2.id;\n        this.side = side;\n        this.color = color;\n    }\n}\n\nexport { Vector };"],"names":["$d4da9a8798806342$export$fbc160adde9cf656","size","hashCount","bits","Array","fill","hash","str","seed","i","length","charCodeAt","add","item","indexes","pos","push","contains","$1e48cf6d27057652$export$9b781de7bf37bf48","div1","div2","side","color","id","$450fab56b0cbf5ba$export$e529deb2bfd496dc","svg","itemLines","checkLines","canvasContainer","document","getElementById","initializeSVG","renderLines","v","removeChild","createElementNS","setAttribute","style","position","left","top","width","height","pointerEvents","appendChild","startX","startY","endX","endY","dDiv","innerHTML","backgroundColor","origin","getBoundingClientRect","destiny","parent","line","drawCheckLine","drawItemLine","clearCheckLines","clearAllLines","$dad545c909cfec2d$var$bloom","$dad545c909cfec2d$var$uiBuilder","draw","bitsRendered","inputCheckButton","inputItemButton","inputCheckField","inputItemField","inputWordDiv","captionDiv","bitsDiv","listDiv","bloom","initializeAddItemInputContainer","initializeAddItemContainer","initializeBloomFilterContainer","initializeCheckItemContainer","initializeDisplayContainer","initializeStartingParamsUI","initializeDebug","renderBits","forEach","bit","itemDiv","createElement","className","textContent","title","initialItems","debugSearch","value","addItem","checkItem","trim","opacity","bitDiv","dispatchEvent","Event","toString","padStart","addItemInputContainer","type","placeholder","maxLength","addEventListener","e","key","addItemContainer","bloomFilterContainer","checkItemInputContainer","displayContainer","startingParamsContainer","sizeGroup","display","alignItems","marginBottom","sizeLabel","marginRight","minWidth","textAlign","sizeInput","hashGroup","hashCountLabel","hashCountInput","setParamsButton","parseInt","isNaN","$dad545c909cfec2d$var$refreshUI","setTimeout","window"],"version":3,"file":"bloom_filter_va.d0fe7907.js.map"}